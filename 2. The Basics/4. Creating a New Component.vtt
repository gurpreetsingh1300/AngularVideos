WEBVTT

00:02.560 --> 00:04.210
Components are important right,

00:04.240 --> 00:09.940
that is why we start with one, with the app component. It on the one hand is a normal Angular component

00:09.970 --> 00:14.740
but on the other hand, it's also kind of special because it serves as our root component,

00:14.800 --> 00:20.320
it's in the end listed here in the app module in this bootstrap array which tells Angular, hey this is a special

00:20.320 --> 00:21.010
component,

00:21.100 --> 00:26.490
you should bootstrap the whole application with that component being the root component.

00:26.560 --> 00:33.460
So all other components we create will not be added to the index.html file, there selectors will not

00:33.460 --> 00:34.600
be added here,

00:34.910 --> 00:37.900
there selectors will be added to the app.component.html

00:37.900 --> 00:43.940
file because this is now the root component of our app where we add the other parts.

00:44.110 --> 00:47.970
Enough talking about adding components, let's add one.

00:48.130 --> 00:53.610
Let's say we want to output some information about a server.

00:53.710 --> 01:00.720
We're building a back-end for our server management application and we want to output some server information.

01:00.820 --> 01:07.260
So I will store this in a new folder which is a subfolder of the app folder because generally in a Angular

01:07.260 --> 01:13.330
CLI project, all your app related content will go into this app folder.

01:13.540 --> 01:17.210
I will name it server because it will hold my ServerComponent

01:17.260 --> 01:18.730
and this is a good practice,

01:18.730 --> 01:24.910
having the folder name equal your component name and each component typically should have its own folder,

01:25.110 --> 01:28.280
though it's not a hard rule but generally, it makes sense.

01:28.540 --> 01:32.690
So here in the server folder, I will add my ServerComponent.

01:32.690 --> 01:41.110
Now a good naming convention is to have server, so the name of your component first, then a dot and then

01:41.200 --> 01:47.200
component, we will later learn that there are other building blocks in an Angular application too,

01:47.320 --> 01:52.030
so by using filenames like this, it's very easy to see what's inside the file.

01:52.270 --> 01:55.380
And very important, don't forget to add .ts,

01:55.570 --> 01:59.780
so for TypeScript because this is what we will write this component in.

02:00.190 --> 02:03.020
So now we get an empty file for our new component,

02:03.160 --> 02:04.470
how do we create a component

02:04.480 --> 02:13.370
now? First of all, a component simply is just a class, a TypeScript class, so that Angular is able to instantiate

02:13.370 --> 02:18.010
it to create objects based on the blueprint we set up here you could say.

02:18.010 --> 02:22.030
So let's export this class so that we can use it outside of the file too

02:22.030 --> 02:27.460
because as I mentioned before, we're going to use our component in the app component for example to add

02:27.460 --> 02:28.430
it there.

02:28.870 --> 02:35.020
So we will add a class here and this class should now be named ServerComponent.

02:35.020 --> 02:41.260
Again the naming convention here, have the name of the component first, server and then also the description,

02:41.350 --> 02:41.910
component

02:41.920 --> 02:46.630
because later we will also learn about other parts which might then be named differently in the Angular

02:46.630 --> 02:47.310
app.

02:47.620 --> 02:51.340
This is our class and right now, it's a normal TypeScript class,

02:51.370 --> 02:53.110
nothing special about it,

02:53.530 --> 02:58.100
we can't use it like this, Angular doesn't have all the information it requires.

02:58.330 --> 03:04.330
So we should add something to it which tells Angular that this is not only a normal TypeScript class

03:04.840 --> 03:07.640
but instead something special, a component.

03:08.050 --> 03:10.720
We do this by adding a special decorator,

03:10.720 --> 03:18.580
decorators are a TypeScript feature which allow you to enhance your classes for example, enhance elements

03:18.580 --> 03:19.540
you use in your code,

03:19.540 --> 03:20.970
it's not restricted to classes

03:20.980 --> 03:23.690
but here we will use a class decorator.

03:23.740 --> 03:30.930
It's the component decorator and decorators are always attached by adding an @ sign in front of them.

03:30.950 --> 03:36.640
Now this component decorator is not something TypeScript knows from the start,

03:36.640 --> 03:38.890
so we have to import it.

03:39.070 --> 03:46.990
We have to add an import and this import now needs to give us access to component, so we need to import

03:46.990 --> 03:52.870
component between curly braces because from the file where we're going to import this, we could import other

03:52.870 --> 03:53.770
parts too,

03:53.830 --> 03:59.670
so we have to specifically pick the component by using this syntax and then it's from

03:59.890 --> 04:06.470
and now the package where we import component from is @angular/core.

04:06.730 --> 04:11.980
Now Angular ships with a couple of packages where it basically groups its functionalities and the core

04:11.980 --> 04:17.100
package as the name implies gives us access to some of the core functionalities of Angular.

04:17.380 --> 04:19.820
So with that, we imported component,

04:19.990 --> 04:26.550
now this @component decorator is known to TypeScript, so when it parses this file and compiles it to Javascript,

04:26.550 --> 04:28.720
it is able to understand it,

04:28.780 --> 04:34.270
now we need to pass a Javascript object to this component decorator to configure it because without

04:34.300 --> 04:38.230
any configuration, it's still not that valuable to Angular.

04:38.230 --> 04:44.320
But here, we can set up some important information which will be stored as metadata for this class in

04:44.320 --> 04:49.110
the background then which will tell Angular what to do with this class

04:49.240 --> 04:53.310
and one important information piece is the selector.

04:53.440 --> 05:00.730
So basically, the HTML tag by which you're able to use this component later in your other components

05:00.730 --> 05:01.330
templates,

05:01.330 --> 05:03.720
we will see this in action soon.

05:03.720 --> 05:05.670
The selector should be a string

05:05.820 --> 05:12.300
and here you may set up any name you want but you should make sure that it is a unique selector, that

05:12.300 --> 05:17.290
you don't accidentally overwrite a default HTML element or something like this.

05:17.370 --> 05:25.310
So typically, you prefix it with app- and then a fitting name, like server because it's a ServerComponent.

05:25.320 --> 05:30.770
This is my own selector by which I can now later use this component in my other components

05:30.780 --> 05:32.410
HTML files.

05:32.820 --> 05:39.980
So with that set up, the other important piece we need to have is the template and here let's reference

05:40.040 --> 05:41.890
another external file,

05:41.940 --> 05:43.360
I'll come back to another

05:43.370 --> 05:49.160
alternative to this soon and this external file of course needs to be created.

05:49.200 --> 05:55.190
So in the same folder, I will create a server.component and now .html file,

05:55.200 --> 05:59.710
this will hold the template, the HTML code of my component here.

05:59.790 --> 06:03.990
So here, I can now basically add any content I want,

06:03.990 --> 06:12.050
like for example the Server Component to start simple and back to the TypeScript file, I can now point

06:12.140 --> 06:14.520
to this HTML file.

06:14.570 --> 06:17.080
We need a relative path for this,

06:17.120 --> 06:19.710
in the end this will all get bundled by webpack,

06:19.790 --> 06:22.690
so we need to tell it where to find the HTML file.

06:22.910 --> 06:30.680
Well and relative to the TypeScript file, the path simply is ./server.component.html,

06:30.770 --> 06:37.670
like this, this is pointing to this file. With this we created our first component,

06:37.850 --> 06:44.420
now to use it we need to dive into app module and understand what this does because we need to change

06:44.420 --> 06:46.980
something here to use our own component.

06:47.090 --> 06:49.350
Let's do this in the next lecture.
