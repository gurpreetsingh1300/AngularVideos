WEBVTT

00:02.660 --> 00:07.900
In the last lecture, we had a look at string interpolation which is a great tool for outputting data

00:07.900 --> 00:09.280
in a template,

00:09.340 --> 00:11.730
now I want to have a look at property binding.

00:11.770 --> 00:14.110
Now one important information by the way,

00:14.290 --> 00:20.680
there are a lot of times where you can either use property binding or string interpolation

00:20.680 --> 00:22.790
and I will show what I mean in a second.

00:23.080 --> 00:29.710
Let's go to our servers component where we manage all the servers and I want to allow the user to add

00:29.710 --> 00:31.380
new servers, at least soon

00:31.390 --> 00:32.750
I want to allow that.

00:33.010 --> 00:37.690
So we will need a button where I say add server on it

00:37.690 --> 00:42.680
and I will just add some CSS classes, btn and btn-primary to make this part look nice,

00:42.820 --> 00:49.400
this is all using normal bootstrap CSS classes though, nothing to do with Angular and to reflect this

00:49.400 --> 00:51.820
change in my servers component here,

00:51.910 --> 00:56.620
I also want to comment out the inline template and point to the external template again,

00:56.800 --> 01:06.380
so templateUrl should point to my servers.component.html file, like this.

01:06.450 --> 01:12.510
So now with this, if I save this, we see that button here. Right now, it doesn't make any sense that I'm able

01:12.510 --> 01:18.460
to click this button because it doesn't do anything, we haven't learned to react to a button click yet.

01:18.810 --> 01:26.250
So I will add a new property in my TypeScript code here which I'll name allowNewServer and set it

01:26.280 --> 01:27.930
to false.

01:27.930 --> 01:31.370
So now this is also another property holding a boolean value,

01:31.390 --> 01:37.050
so true or false, in this case false because I don't want to allow the user to create a new server and

01:37.050 --> 01:40.850
you could again imagine that this is somehow derived dynamically,

01:40.920 --> 01:48.460
we will soon work with some dynamic data. So in the HTML file here, I now want to disable the button

01:48.630 --> 01:55.050
and as you probably know, there is a disabled attribute you can add, like this. If we now save this, the button

01:55.100 --> 01:56.660
is disabled, I can't click it.

01:56.790 --> 01:59.990
That's nice but that's hardcoded into HTML,

02:00.000 --> 02:04.440
now maybe this allowNewServer code here changes

02:04.470 --> 02:07.980
however, maybe it's not set to this all the time.

02:08.190 --> 02:10.170
So then, we wouldn't be able to react to this

02:10.170 --> 02:15.840
and I can actually demonstrate this by for now in the constructor which is simply a method executed

02:15.840 --> 02:22.200
at the point of time this component is created by Angular, by there calling setTimeout,

02:22.230 --> 02:24.280
a normal Javascript function

02:24.600 --> 02:29.900
and here I define after which period of time or after how many milliseconds something should happen,

02:29.940 --> 02:35.080
so after 2000 milliseconds which are two seconds, I want to execute a function

02:35.160 --> 02:38.400
and here I'm using an ES6 arrow function.

02:38.400 --> 02:40.320
This syntax might look strange,

02:40.350 --> 02:48.390
it's almost the same as function like this, with some difference when it comes to handling the this keyword.

02:48.390 --> 02:53.670
But in the end, here you passed the arguments and here you have the function body, more importantly in

02:53.670 --> 02:54.420
here,

02:54.510 --> 03:00.120
I can set allowNewServer and now this would not work in the other syntax because this would then

03:00.120 --> 03:03.320
be referring to something else, can set it to true.

03:03.330 --> 03:08.610
So after two seconds, this will be switched to true and since we hardcoded this, of course this doesn't affect

03:08.640 --> 03:12.030
our button here at all, it stays disabled.

03:12.090 --> 03:19.740
So I want to bind it to allowNewServer. So now to make this disabled functionality dynamic, we can

03:19.740 --> 03:26.580
bind to it by enclosing it in square brackets. Square brackets indicate to Angular that we're using

03:26.580 --> 03:35.160
property binding, that we want to dynamically bind some property and disable the HTML attribute, in the

03:35.160 --> 03:35.490
end,

03:35.490 --> 03:42.390
in normal HTML, only sets a specific property on the underlying DOM element.

03:42.420 --> 03:48.870
You might note that each HTML element you use is parsed by the browser and kind of translated into

03:48.870 --> 03:51.420
an element on the document object model,

03:51.420 --> 03:54.080
this is totally unrelated to Angular

03:54.270 --> 04:00.480
and therefore we have an element in this DOM and this element has a couple of properties.

04:00.690 --> 04:05.350
A lot of these can't even be set through attributes on the HTML element.

04:05.700 --> 04:11.300
Well one of the properties is the disabled property and you can set it through the disabled attribute

04:11.310 --> 04:18.240
but here we're not using the disabled attribute anymore, with the square brackets, we are directly binding

04:18.520 --> 04:22.190
to this native disabled property

04:22.190 --> 04:24.350
this HTML element has.

04:24.630 --> 04:27.040
So now, we can set this equal to

04:27.150 --> 04:34.730
and now between the quotation marks here, an expression which for this property resolves to a boolean

04:34.740 --> 04:41.760
but for other properties, another type might be required because again, you can bind to a lot of properties,

04:41.940 --> 04:46.220
basically to all the HTML element properties.

04:46.230 --> 04:50.020
We'll soon learn that there are also other properties you can bind to.

04:50.310 --> 04:53.350
So for now I can simply pass allowNewServer here,

04:53.640 --> 04:58.500
my property name because this will resolve to true or false,

04:58.520 --> 05:04.170
exactly the value the disabled property needs because it has to decide whether it should be disabled or

05:04.170 --> 05:04.840
not.

05:05.040 --> 05:08.940
So now with that, if we reverse this,

05:09.010 --> 05:14.110
so by adding an exclamation mark, we made sure that this is only disabled if this is false,

05:14.100 --> 05:17.520
so if allowNewServer is not true,

05:17.520 --> 05:20.040
otherwise you would do exactly the opposite.

05:20.190 --> 05:24.130
So now with the exclamation mark, if we go back to the app, you see it's disabled

05:24.430 --> 05:26.770
but after two seconds, let me reload this,

05:26.820 --> 05:34.020
it becomes enabled because now we're binding to this disabled property, this native element property,

05:34.400 --> 05:41.730
we're binding this to our own TypeScript property here and the convenient thing is and this is what Angular is

05:41.760 --> 05:45.030
all about, that this will update dynamically.

05:45.150 --> 05:52.270
So once allowNewServer changes, this is changed in the DOM, so now the button gets enabled.

05:52.350 --> 05:54.960
One of the main reasons why you use Angular,

05:54.960 --> 06:02.370
it makes it very easy for you to interact with your DOM, to change something there at runtime like we

06:02.370 --> 06:03.530
do here.

06:03.830 --> 06:06.040
That is property binding in place,

06:06.080 --> 06:13.070
now as I mentioned besides binding to HTML element properties like we do here, you can also bind to other

06:13.070 --> 06:17.390
properties, for example of directives, something we haven't learned about yet

06:17.630 --> 06:21.090
and your own component, something I will also show you later.

06:21.140 --> 06:23.300
So this is property binding.

06:23.300 --> 06:26.100
Before moving on the other two forms of data binding,

06:26.180 --> 06:31.810
let's find out where you could actually use string interpolation instead of property binding.
